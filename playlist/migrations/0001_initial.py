# Generated by Django 4.0 on 2021-12-08 22:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('sort_name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Emoticon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100)),
                ('alt_text', models.CharField(max_length=100)),
                ('filename', models.CharField(max_length=100)),
                ('usable', models.BooleanField(default=True)),
                ('cripple', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='OldShow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=2500)),
                ('playing', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oldshows', to='auth.user')),
            ],
        ),
        migrations.CreateModel(
            name='RemovedEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oldid', models.IntegerField()),
                ('creation_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('short_name', models.CharField(max_length=15)),
                ('description', models.CharField(max_length=2500)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=200)),
                ('value', models.CharField(max_length=3000)),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('composer', models.CharField(blank=True, max_length=300)),
                ('lyricist', models.CharField(blank=True, max_length=300)),
                ('remixer', models.CharField(blank=True, max_length=300)),
                ('genre', models.CharField(blank=True, max_length=100)),
                ('track', models.PositiveIntegerField(blank=True, null=True)),
                ('length', models.IntegerField(editable=False)),
                ('bitrate', models.IntegerField(editable=False)),
                ('sha_hash', models.CharField(editable=False, max_length=40, unique=True)),
                ('add_date', models.DateTimeField(editable=False)),
                ('format', models.CharField(editable=False, max_length=5)),
                ('category', models.CharField(default='regular', editable=False, max_length=20)),
                ('banned', models.BooleanField(default=False, editable=False)),
                ('banreason', models.CharField(blank=True, editable=False, max_length=100)),
                ('unban_adds', models.IntegerField(default=0, editable=False)),
                ('avgscore', models.FloatField(default=0, editable=False)),
                ('voteno', models.IntegerField(default=0, editable=False)),
                ('play_count', models.IntegerField(default=0, editable=False)),
                ('album', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='playlist.album')),
                ('artist', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='songs', to='playlist.artist')),
            ],
            options={
                'permissions': (('upload_song', 'g2 Can upload songs'), ('ban_song', 'g2 Can ban songs'), ('edit_song', 'g2 Can edit all songs.'), ('start_stream', 'g2 Can start the stream.'), ('stop_stream', 'g2 Can stop the stream'), ('view_g2admin', 'g2 Can view g2 Admin page.'), ('download_song', 'g2 Can download songs directly from the server'), ('merge_song', 'g2 Can merge one song into another')),
            },
        ),
        migrations.CreateModel(
            name='SongDir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=300)),
                ('hash_letters', models.IntegerField()),
                ('usable', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploads', models.IntegerField(default=0)),
                ('api_key', models.CharField(blank=True, editable=False, max_length=40)),
                ('sa_id', models.IntegerField(blank=True, help_text='Something Awful account ID', null=True, unique=True)),
                ('tokens', models.IntegerField(default=0)),
                ('s_playlistHistory', models.IntegerField(default=10, help_text='Number of previously played dongs shown')),
                ('favourites', models.ManyToManyField(related_name='lovers', to='playlist.Song')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.user')),
            ],
            options={
                'permissions': (('view_user', 'g2 Can view user pages'), ('give_token', 'g2 Can award tokens to users')),
            },
        ),
        migrations.CreateModel(
            name='SongReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corrupt', models.BooleanField(default=False)),
                ('not_music', models.BooleanField(default=False)),
                ('other', models.BooleanField(default=False)),
                ('user_note', models.CharField(blank=True, max_length=300)),
                ('created_at', models.DateTimeField()),
                ('actioned_at', models.DateTimeField(null=True)),
                ('approved', models.BooleanField(default=False)),
                ('denied', models.BooleanField(default=False)),
                ('actioned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actioned_song_reports', to='auth.user')),
                ('duplicate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='playlist.song')),
                ('reporter', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='song_reports', to='auth.user')),
                ('song', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='playlist.song')),
            ],
            options={
                'permissions': (('approve_reports', 'g2 Can view & approve/deny SongEdits'),),
            },
        ),
        migrations.CreateModel(
            name='SongEdit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applied', models.BooleanField(default=False)),
                ('denied', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField()),
                ('actioned_at', models.DateTimeField(default=None, null=True)),
                ('actioned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actioned_edits', to='auth.user')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_edits', to='auth.user')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_edits', to='playlist.song')),
            ],
            options={
                'permissions': (('view_edits', 'g2 Can view & approve/deny SongEdits'),),
            },
        ),
        migrations.AddField(
            model_name='song',
            name='location',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='playlist.songdir'),
        ),
        migrations.AddField(
            model_name='song',
            name='uploader',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='uploads', to='auth.user'),
        ),
        migrations.CreateModel(
            name='ShowMinute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('listeners', models.IntegerField()),
                ('metadata', models.CharField(max_length=300)),
                ('avg_score', models.FloatField()),
                ('show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='minutes', to='playlist.oldshow')),
            ],
        ),
        migrations.CreateModel(
            name='ShowComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=400)),
                ('time', models.DateTimeField()),
                ('show', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='playlist.oldshow')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='show_comments', to='auth.user')),
            ],
            options={
                'ordering': ['-time'],
            },
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=2500)),
                ('reschedule', models.BooleanField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shows', to='auth.user')),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addtime', models.DateTimeField()),
                ('playtime', models.DateTimeField(blank=True, null=True)),
                ('playing', models.BooleanField(default=False)),
                ('hijack', models.BooleanField(default=False)),
                ('token_used', models.BooleanField(default=False)),
                ('adder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.user')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='playlist.song')),
            ],
            options={
                'verbose_name_plural': 'Playlist',
                'ordering': ['-playing', '-hijack', 'addtime'],
                'permissions': (('view_playlist', 'g2 Can view the playlist'), ('queue_song', 'g2 Can add song to the playlist'), ('remove_entry', 'g2 Can remove all playlist entries'), ('skip_song', 'g2 Can skip currently playing song')),
            },
        ),
        migrations.CreateModel(
            name='OldPlaylistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addtime', models.DateTimeField()),
                ('playtime', models.DateTimeField()),
                ('skipped', models.BooleanField(default=False)),
                ('adder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.user')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oldentries', to='playlist.song')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FieldEdit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('new_value', models.CharField(max_length=300)),
                ('field', models.CharField(max_length=50)),
                ('song_edit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_edits', to='playlist.songedit')),
            ],
        ),
        migrations.CreateModel(
            name='EditNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(max_length=300)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edit_notes', to='auth.user')),
                ('edit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='playlist.songedit')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=4000)),
                ('time', models.IntegerField(default=0)),
                ('datetime', models.DateTimeField()),
                ('song', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='playlist.song')),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='auth.user')),
            ],
            options={
                'ordering': ['-datetime'],
                'permissions': (('can_comment', 'g2 Can comment on songs'),),
            },
        ),
        migrations.CreateModel(
            name='ShowRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='playlist.oldshow')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='show_ratings', to='auth.user')),
            ],
            options={
                'unique_together': {('user', 'show')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='playlist.song')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='auth.user')),
            ],
            options={
                'permissions': (('can_rate', 'g2 Can rate songs'),),
                'unique_together': {('user', 'song')},
            },
        ),
    ]
